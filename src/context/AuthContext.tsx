import React, { createContext, useState, useEffect } from "react";
import { BASE_URL } from "../config";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import api from "../api";


export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [regToken, setRegToken] = useState(null);
  const [logToken, setLogToken] = useState(null);
  const [userInfo, setUserInfo] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    const checkAuth = async () => {
      const refresh = await AsyncStorage.getItem("refresh_token");
      setIsAuthenticated(!!refresh); // –µ—Å–ª–∏ refresh –µ—Å—Ç—å ‚Äì —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    console.log('Auth state changed to:', isAuthenticated);
    };
    checkAuth();
  }, []);

  // üìå 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const register = (email, username, navigation) => {
    setIsLoading(true);
    axios
      .post(`${BASE_URL}/registration/`, { email, username })
      .then((res) => {
        let userInfo = res.data;
        console.log(userInfo);

        setRegToken(userInfo.reg_token);
        navigation.navigate("RegisterCode");
      })
      .catch((e) => {
        console.log(`register error ${e}`);
      })
      .finally(() => setIsLoading(false)); // ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
  };

  // üìå 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  const verifyCode = (code, navigation) => {
    setIsLoading(true);
    axios
      .post(`${BASE_URL}/registration/verification/`, {
        code,
        reg_token: regToken,
      })
      .then((res) => {
        console.log(res.data);
        navigation.navigate("RegisterPassword");
      })
      .catch((e) => {
        console.log(`verifyCode error ${e}`);
      })
      .finally(() => setIsLoading(false)); // ‚úÖ
  };

  // üìå 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
  const setPasswordFunc = (password, password2) => {
    setIsLoading(true);
    axios
      .post(
        `${BASE_URL}/registration/password-set/`,
        { password, password2, reg_token: regToken },
        { headers: { "X-Client-Type": "mobile" } }
      )
      .then((res) => {
        const { access_token, refresh_token } = res.data;
        console.log(res.data);
        AsyncStorage.setItem("access_token", access_token);
        AsyncStorage.setItem("refresh_token", refresh_token);
        setIsAuthenticated(true);
      })
      .catch((e) => {
        console.log(`setPassword error ${e}`);
      })
      .finally(() => setIsLoading(false)); // ‚úÖ
  };

  const login = (username, password, navigation) => {
    axios.post(`${BASE_URL}/login/`,
    { username, password }
    ).then((res) => {
      let userInfo = res.data
      console.log(userInfo);

      setLogToken(userInfo.login_token);
      navigation.navigate("LoginCode");
    })   
    .catch((e) => {
        console.log(`register error ${e}`);
      })
      .finally(() => setIsLoading(false)); // ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  const loginCode = (code) => {
    setIsLoading(true);
    axios
      .post(`${BASE_URL}/login/verification/`, {
        code,
        login_token: logToken,
      },{ headers: { "X-Client-Type": "mobile" } })
      .then((res) => {
        const { access_token, refresh_token } = res.data;
        console.log(res.data);
        AsyncStorage.setItem("access_token", access_token);
        AsyncStorage.setItem("refresh_token", refresh_token);
        setIsAuthenticated(true);
      })
      .catch((e) => {
        console.log(`verifyCode error ${e}`);
      })
      .finally(() => setIsLoading(false)); // ‚úÖ
  };
  const logout = async () => {
    await AsyncStorage.multiRemove(["access_token", "refresh_token"]);
    setIsAuthenticated(false); // –ì–ª–∞–≤–Ω–æ–µ - –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  };


  return (
    <AuthContext.Provider
      value={{
        register,
        verifyCode,
        setPasswordFunc,
        regToken,
        isLoading,
        logout,
        isAuthenticated,
        setIsAuthenticated,
        login,
        loginCode,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
